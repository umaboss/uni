// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model application_form {
  id                    Int      @id @default(autoincrement())
  application_id        String   @unique
  student_id            Int
  university_id         Int
  course_id             Int
  personal_information  String?
  educational_background String?
  language_qualification String?
  reasons_to_choose     String?
  family                String?
  financial_support     String?
  mailling_address      String?
  declaration           String?
  uploads               String?
  application_fee       Float?   @default(0)
  send_to_uni           Boolean  @default(false)
  status                String?  @default("pending")
  display               Boolean  @default(true)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model apply_now {
  id                 Int      @id @default(autoincrement())
  name               String
  city               String
  phone_number       String
  last_education     String?
  intrested_country  String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
    email            String
}

model Country {
  id           Int    @id @default(autoincrement())
  country_code String @unique
  country_name String
}

model Users {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       String
  active     Boolean  @default(true)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // blogs      blogs[]
}

model blogs {
  id                Int       @id @default(autoincrement())
  // user_id           Int
  category_id       Int
  title             String
  sm_question       String?
  sm_answer         String?
  review_detail     String?
  rating_count      Int       @default(0)
  review_count      Int       @default(0)
  avg_review_value  Float     @default(0)
  slug              String    @unique
  short_description String?
  description       String?
  image             String?
  image_ext         String?
  is_active         Boolean   @default(true)
  seo               String?
  views             Int       @default(0)
  likes             Int       @default(0)
  ip                String?
  custom_post_type  String?
  post_attributes   String?
  is_featured       Boolean   @default(false)
  sort_order        Int       @default(0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  //  user Users @relation(fields: [user_id], references: [id])
  category blog_category @relation("CategoryBlogs", fields: [category_id], references: [id])
}

model blog_category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  sort_order  Int      @default(0)
  is_active   Boolean  @default(true)
  seo         String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  blogs       blogs[]  @relation("CategoryBlogs")
}



model chat_list {
  id         Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model client_feedbacks {
  id                  Int       @id @default(autoincrement())
  full_name           String
  contact_number      String
  consultant_id       Int
  rating              Int
  average_rating      Float
  behaviour_satis_level Int
  timely_response     Int
  call_response       Int
  knowledge           Int
  likelihood          Int
  customer_experience Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  first_followup      DateTime?
  second_followup     DateTime?
  third_followup      DateTime?
  choosable_status    Boolean   @default(false)
  assigned_employees  String?
  assigned_date       DateTime?
  first_date          DateTime?
  second_date         DateTime?
  third_date          DateTime?
}

model cms {

  id          Int      @id @default(autoincrement())
  page        String   @unique
  meta        String?
  seo_title   String?
  seo_desc    String?
  seo_tags    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Comment {
  comment_id   Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  article_id   Int
  email        String
  mail_status  Boolean  @default(false)
  phone_number String?
  comment      String
  status       String   @default("pending")
  article_url  String
  type         String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}


model components_logs{
  id         Int     @id @default(autoincrement())
  log_id     String  @unique
  page_id    Int
  title      String
  type       String
  meta       String?
  sort_order Int     @default(0)
}


model consultants {
  id           Int      @id @default(autoincrement())
  user_id      Int
  name         String
  company_name String?
  employeeno   String?
  nationality  String?
  state        String?
  city         String?
  address      String?
  designation  String?
  email        String
  phone        String?
  comment      String?
  average_rating Float?
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model contact_button {
  id         Int      @id @default(autoincrement())
  label      String
  url        String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model contact_us_messages {
  id                  Int       @id @default(autoincrement())
  office_location     String
  user_name           String
  user_email          String
  emailSended         Boolean   @default(false)
  smsSended           Boolean   @default(false)
  phone_number        String
  reply               String?
  message             String?
  first_followup      DateTime?
  second_followup     DateTime?
  third_followup      DateTime?
  choosable_status    Boolean   @default(false)
  assigned_employees  String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  assigned_date       DateTime?
  first_date          DateTime?
  second_date         DateTime?
  third_date          DateTime?
  not_connected_status Boolean?
  quality_status      String?
  quality_comment     String?
  quality_date        DateTime?
}

model countries {
  id                         Int      @id @default(autoincrement())
  code                       String
  country                    String
  selected                   Boolean
  image                      String?
  currency                   String
  consultation_fee           Float
  consultation_fee_discount  Float
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt   // âœ… fixed field name
}



model courses {
  id                  Int       @id @default(autoincrement())
  sm_question         String?
  sm_answer           String?
  review_detail       String?
  rating_count        Int       @default(0)
  review_count        Int       @default(0)
  avg_review_value    Float     @default(0.0)
  name                String
  university_id       Int
  subject_id          Int
  qualification       String?
  duration            Int?
  duration_qty        Int?
  duration_type       String?   // e.g., "years", "months"
  yearly_fee          Float?
  application_fee     Float?
  languages           String?
  starting_date       DateTime?
  deadline            DateTime?
  about               String?
  entry_requirments   String?
  curriculum          String?
  scholarship         String?
  sort_order          Int       @default(0)
  active              Boolean   @default(true)
  display             Boolean   @default(true)
  popular             Boolean   @default(false)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // Optional: Relations
  // university         University @relation(fields: [university_id], references: [id])
  // subject            Subject    @relation(fields: [subject_id], references: [id])
}


model cstudents {
  id                               Int       @id @default(autoincrement())
  name                             String
  passport_number                  String
  course_doc                       String?   // Assuming these are file paths or URLs
  intrested_country_doc            String?
  passport_doc                     String?
  photo_doc                        String?
  educational_degree_doc           String?
  educational_certificate_doc      String?
  recomendation_letter_doc         String?
  study_plan                       String?
  ielts_english_proficiency_letter String?
  consultant_id                    Int
  intial_documents_assessment      Boolean   @default(false)
  course_finalaztion               Boolean   @default(false)
  application_submitted            Boolean   @default(false)
  got_admission                    Boolean   @default(false)
  visa_applied                     Boolean   @default(false)
  case_closed                      Boolean   @default(false)
  created_at                       DateTime  @default(now())
  updated_at                       DateTime  @updatedAt

  // Optional: Relation
  // consultant                      Consultant @relation(fields: [consultant_id], references: [id])
}


model custom_attributes{
  id                  Int       @id @default(autoincrement())
  custom_product_type String
  custom_post_type    String
  attribute_name      String
  attribute_slug      String    @unique
  input_type          String    // e.g., "text", "select", "checkbox"
  attribute_data      String?   // Optional, could store JSON string or serialized values
  is_active           Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
}

model custom_categories {
  id                  Int       @id @default(autoincrement())
  slider_id           Int?      // Optional: FK to a Slider model, if exists
  custom_product_type String
  custom_post_type    String
  parent_id           Int?      // For hierarchical categories (self-relation)
  name                String
  slug                String    @unique
  description         String?
  sort_order          Int       @default(0)
  is_active           Boolean   @default(true)
  image               String?   // URL or path to the image
  color               String?   // e.g., hex code or color name
  meta_title          String?
  meta_description    String?
  meta_keywords       String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // Self-relation for parent category
  // parent              CustomCategory? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  // children            CustomCategory[] @relation("CategoryHierarchy")

  // Optional: relation to Slider model
  // slider           Slider? @relation(fields: [slider_id], references: [id])
}


model custom_post_types {
  id                  Int      @id @default(autoincrement())
  name                String
  slug                String   @unique
  sort_order          Int      @default(0)
  has_post_seo        Boolean  @default(false)
  is_category_enable  Boolean  @default(false)
  has_featured_image  Boolean  @default(false)
  has_long_desc       Boolean  @default(false)
  has_desc            Boolean  @default(false)
  has_author          Boolean  @default(false)
  has_image_gallery   Boolean  @default(false)
  show_sku            Boolean  @default(false)
  show_price          Boolean  @default(false)
  show_quantity       Boolean  @default(false)
  show_discount       Boolean  @default(false)
  has_brands          Boolean  @default(false)
  filters             Boolean  @default(false)
  importable          Boolean  @default(false)
  inventory_enabled   Boolean  @default(false)
  has_related         Boolean  @default(false)
  has_logs            Boolean  @default(false)
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}


model  discountoffers {
  id                           Int       @id @default(autoincrement())
  name                         String
  lastEducation                String?
  lastEducationPer             Float?    // Percentage of last education, assumed numeric
  city                         String?
  phone                        String
  email                        String
  emailSended                  Boolean   @default(false)
  smsSended                    Boolean   @default(false)
  location                     String?
  familyDetail                 String?
  do_status                    String?   // Can be an enum if values are known
  created_at                   DateTime  @default(now())
  updated_at                   DateTime  @updatedAt
  assigned_employees           String?   // Can be changed to a relation if it's a FK
  first_followup               String?
  first_followup_change_date   DateTime?
  second_followup              String?
  second_followup_change_date  DateTime?
  third_followup               String?
  third_followup_change_date   DateTime?
  choosable_status             String?
  assigned_date                DateTime?
  first_date                   DateTime?
  second_date                  DateTime?
  third_date                   DateTime?
  not_connected_status         String?
  quality_status               String?
  quality_comment              String?
  quality_date                 DateTime?
}


model document_download_users {

  id           Int      @id @default(autoincrement())
  document_id  Int
  name         String
  email        String
  phone        String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Optional relation to a Document model
  // document     Document @relation(fields: [document_id], references: [id])
}


model downloads {
  id          Int      @id @default(autoincrement())
  product_id  Int
  name        String
  email       String
  phone       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Optional: relation to Product model
  // product     Product @relation(fields: [product_id], references: [id])
}

model emails {
  id                          Int       @id @default(autoincrement())
  name                        String
  email                       String
  emailSended                 Boolean   @default(false)
  smsSended                   Boolean   @default(false)
  phone                       String
  company                     String?
  subject                     String?
  message                     String?
  is_read                     Boolean   @default(false)
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt
  type                        String?
  location                    String?
  assigned_employees          String?   // Consider relation if you have Employee model
  first_followup              String?
  first_followup_change_date  DateTime?
  second_followup             String?
  second_followup_change_date DateTime?
  third_followup              String?
  third_followup_change_date  DateTime?
  choosable_status            String?
  assigned_date               DateTime?
  first_date                  DateTime?
  second_date                 DateTime?
  third_date                  DateTime?
  not_connected_status        String?
  quality_status              String?
  quality_comment             String?
  quality_date                DateTime?
}

model error_logs {
  id          Int      @id @default(autoincrement())
  message     String
  code        String
  line        Int
  file        String
  is_resolved Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}


model free_consulations {
  id                      Int       @id @default(autoincrement())
  name                    String
  email                   String    @unique
  emailSended             Boolean?  // Whether email was sent
  smsSended               Boolean?  // Whether SMS was sent
  phone_number            String?
  last_education          String?
  country                 String?
  city                    String?
  apply_for               String?
  interested_country      String?
  
  first_followup          DateTime?
  first_followup_change_date DateTime?
  second_followup         DateTime?
  second_followup_change_date DateTime?
  third_followup          DateTime?
  third_followup_change_date DateTime?
  
  choosable_status        String?
  
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  
  assigned_employees      String?   // You might want a relation if employees are a separate model
  assigned_date           DateTime?
  
  first_date              DateTime?
  second_date             DateTime?
  third_date              DateTime?
  
  not_connected_status    String?
  unsubscribed            Boolean?  // Or DateTime? if you want unsubscribe date
  
  quality_status          String?
  quality_comment         String?
  quality_date            DateTime?
}

model group_modules {
  id          Int     @id @default(autoincrement())
  group_id    Int
  module      String

  can_show    Boolean @default(false)
  can_create  Boolean @default(false)
  can_edit    Boolean @default(false)
  can_delete  Boolean @default(false)
  can_import  Boolean @default(false)

  show_email  Boolean @default(false)
  show_phone  Boolean @default(false)

  // If you have a Group model:
  // group      Group   @relation(fields: [group_id], references: [id])
}


model guides {
  id                Int       @id @default(autoincrement())
  user_id           Int
  guide_type        String
  university_id     Int?
  subject_id        Int?
  title             String
  sm_question       String?
  sm_answer         String?
  review_detail     String?
  rating_count      Int       @default(0)
  review_count      Int       @default(0)
  avg_review_value  Float     @default(0)
  sub_title         String?
  slug              String    @unique
  short_description String?
  description       String?
  image             String?
  image_ext         String?
  is_active         Boolean   @default(true)
  seo               String?
  views             Int       @default(0)
  likes             Int       @default(0)
  ip                String?
  custom_post_type  String?
  post_attributes   String?
  is_featured       Boolean   @default(false)
  sort_order        Int       @default(0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations can be added if User, University, Subject models exist
  // user        User       @relation(fields: [user_id], references: [id])
  // university  University @relation(fields: [university_id], references: [id])
  // subject     Subject    @relation(fields: [subject_id], references: [id])
}

model issued_items {
  id           Int       @id @default(autoincrement())
  post_id      Int
  unit_amount  Float
  total_amount Float
  qty          Int

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Optionally, if you have a Post model:
  // post         Post     @relation(fields: [post_id], references: [id])
}

model job_applies {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  phone_number String?
  start_date   DateTime?
  resume       String?   // Could be a URL or file path
  job_id       Int

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Optional relation to a Job model:
  // job          Job       @relation(fields: [job_id], references: [id])
}


model job_opprtunities {
  id               Int       @id @default(autoincrement())
  title            String
  job_type         String?
  city             String?
  province         String?
  country          String?
  site_based       Boolean?  @default(false)
  skills           String?   // Could be a JSON string or comma-separated list
  experience       String?
  requirements     String?
  responsibilities String?
  description      String?
  mail_status      String?   // e.g., sent, pending, failed
  post_status      String?   // e.g., active, closed, draft

  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model logos {
  id         Int       @id @default(autoincrement())
  type       String
  alt        String?
  link       String?
  image      String?
  
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model media {
  id         Int       @id @default(autoincrement())
  name       String
  type       String
  size       Int       // Size in bytes, assuming integer
  meta       Json?     // Metadata stored as JSON, optional
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model  menus{
  id           Int       @id @default(autoincrement())
  name         String
  is_primary   Boolean   @default(false)
  is_secondary Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model menu_items {
  id          Int       @id @default(autoincrement())
  menu_id     Int
  parent      Int?      // Nullable for top-level items
  title       String
  type        String?
  url         String?
  icon        String?
  sort_order  Int?      @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Optional relation to Menu if you have a Menu model
  // menu        Menu      @relation(fields: [menu_id], references: [id])
  
  // Self relation for parent menu item
  // parentItem  MenuItem? @relation("MenuItemParent", fields: [parent], references: [id])
  // children    MenuItem[] @relation("MenuItemParent")
}


model messages {
  id          Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  list_id     Int?      // Optional, if message is part of a list/conversation
  is_student  Boolean?  @default(false)
  message     String
  read        Boolean   @default(false)
  display     Boolean   @default(true)
  
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? // Soft delete, nullable

  // Optional relations if you have User model
  // sender     User      @relation("SentMessages", fields: [sender_id], references: [id])
  // receiver   User      @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}




model minhaj_university_leads {
  id                Int       @id @default(autoincrement())
  full_name         String
  roll_number       String    @unique
  department        String?
  email             String    @unique
  last_education    String?
  country           String?
  city              String?
  interested_country String?
  apply_for         String?
  whatsapp_number   String?
  
  first_followup    DateTime?
  first_date        DateTime?
  second_followup   DateTime?
  second_date       DateTime?
  third_followup    DateTime?
  third_date        DateTime?

  choosable_status  String?
  shared_user_ids   String?    // Consider JSON or relation if multiple users
  assigned_date     DateTime?
  emailSended       Boolean?   @default(false)
  smsSended         Boolean?   @default(false)
  
  quality_status    String?
  quality_comment   String?
  quality_date      DateTime?

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}


model news {
  id            Int       @id @default(autoincrement())
  university_id Int
  consultant_id Int
  title         String
  description   String?

  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Optional relations if you have University and Consultant models
  // university   University  @relation(fields: [university_id], references: [id])
  // consultant   Consultant  @relation(fields: [consultant_id], references: [id])
}


model notifications {
  id             Int       @id @default(autoincrement())
  type           String
  name           String?
  email          String?
  message        String?
  user_id        Int?
  post_id        Int?
  order_id       Int?
  mail_id        Int?
  university_id  Int?
  consultant_id  Int?
  student_id     Int?
  application_id Int?
  review_id      Int?
  meta           Json?      // For storing additional data
  is_read        Boolean    @default(false)
  
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  // Optional relations (uncomment if these models exist)
  // user          User?         @relation(fields: [user_id], references: [id])
  // post          Post?         @relation(fields: [post_id], references: [id])
  // order         Order?        @relation(fields: [order_id], references: [id])
  // mail          Mail?         @relation(fields: [mail_id], references: [id])
  // university    University?   @relation(fields: [university_id], references: [id])
  // consultant    Consultant?   @relation(fields: [consultant_id], references: [id])
  // student       Student?      @relation(fields: [student_id], references: [id])
  // application   Application?  @relation(fields: [application_id], references: [id])
  // review        Review?       @relation(fields: [review_id], references: [id])
}


model online_consultants {
  id                        Int       @id @default(autoincrement())
  application_type           String
  student_name              String
  student_email             String
  emailSended               Boolean?  @default(false)
  smsSended                 Boolean?  @default(false)
  student_phone_number      String?
  student_last_education    String?
  student_country           String?
  student_state             String?
  student_city              String?
  student_apply_for         String?
  interested_country        String?

  student_passport_image    String?    // URL or path
  student_last_education_image String? // URL or path

  first_followup            DateTime?
  first_followup_change_date DateTime?

  second_followup           DateTime?
  second_followup_change_date DateTime?

  third_followup            DateTime?
  third_followup_change_date DateTime?

  choosable_status          String?

  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt

  assigned_employees        String?   // Could be JSON or relation
  assigned_date             DateTime?

  first_date                DateTime?
  second_date               DateTime?
  third_date                DateTime?

  not_connected_status      String?
  quality_status            String?
  quality_comment           String?
  quality_date              DateTime?
}


model pages {
  id             Int       @id @default(autoincrement())
  title          String
  slug           String    @unique
  is_default     Boolean   @default(false)
  meta           Json?     // For storing flexible metadata
  is_home        Boolean   @default(false)
  show_title     Boolean   @default(true)
  slider_id      Int?
  header_image   String?
  meta_title     String?
  meta_desc      String?
  meta_keywords  String?
  seo            String?
  custom_css     String?

  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  // Optional relation if you have a Slider model
  // slider       Slider?   @relation(fields: [slider_id], references: [id])
}



model pages_components {
  id         Int      @id @default(autoincrement())
  page_id    Int
  title      String
  type       String
  meta       Json?
  sort_order Int?

  // Relation to Page model
  // page       Page    @relation(fields: [page_id], references: [id])
}


model page_logs {
  id         Int       @id @default(autoincrement())
  user_id    Int
  page_id    Int
  type       String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Optional relations if you have User and Page models:
  // user       User      @relation(fields: [user_id], references: [id])
  // page       Page      @relation(fields: [page_id], references: [id])
}

model password_resets {
  email      String
  token      String     @unique
  created_at DateTime   @default(now())

  @@id([email, token])  // Composite primary key if needed
}


model payment_details {
  id               Int       @id @default(autoincrement())
  visit_visa_id    Int
  transaction_id   String    @unique
  card_holder_name String
  amount           Float
  currency         String
  status           String
  description      String?
  transaction_date DateTime
  transaction_time String?   // Could be stored as part of DateTime, but kept separate here
  receipt_url      String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Optional relation if you have a VisitVisa model
  // visitVisa       VisitVisa @relation(fields: [visit_visa_id], references: [id])
}

model permissions {
  id                Int       @id @default(autoincrement())
  admin_id          Int       @unique
  admin_name        String
  admin_email       String    @unique
  admin_password    String
  admin_permissions String?   // Could store JSON or serialized permissions

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}


model posts {
  id                Int       @id @default(autoincrement())
  user_id           Int
  category_id       Int
  brand_id          Int?
  title             String
  slug              String    @unique
  short_description String?
  description       String?
  image             String?
  sku               String?
  price             Float
  discounted_price  Float?
  quantity          Int       @default(0)
  gallery           String?   // Could be JSON or CSV of image URLs
  discount          Float?    // Percentage or amount
  post_type         String?
  meta_keywords     String?
  meta_description  String?
  meta_title        String?
  link_canonical    String?
  is_featured       Boolean   @default(false)
  attributes        Json?     // For flexible attribute storage
  related           Json?     // Related products as JSON array
  best_seller       Boolean   @default(false)
  top_rated         Boolean   @default(false)
  unit              String?
  weight            Float?
  is_active         Boolean   @default(true)
  
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Optional relations if you have User, Category, Brand models:
  // user              User      @relation(fields: [user_id], references: [id])
  // category          Category  @relation(fields: [category_id], references: [id])
  // brand             Brand?    @relation(fields: [brand_id], references: [id])
}


model post_comments {
  id           Int       @id @default(autoincrement())
  post_id      Int
  name         String
  email        String
  phone        String?
  subject      String?
  company_name String?
  comment      String?
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Optional relation to Post model:
  // post       Post      @relation(fields: [post_id], references: [id])
}


model post_components {
  id         Int      @id @default(autoincrement())
  post_id    Int
  title      String
  type       String
  meta       Json?
  sort_order Int?

  // Relation to Post model
  // post       Post    @relation(fields: [post_id], references: [id])
}


model post_logs {
  id          Int       @id @default(autoincrement())
  post_type   String
  post_id     Int
  user_id     Int
  post_title  String?
  type        String
  meta        Json?
  
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Optional relations if you have User and Post models:
  // user       User      @relation(fields: [user_id], references: [id])
  // post       Post      @relation(fields: [post_id], references: [id])
}


model post_reviews {
  id         Int       @id @default(autoincrement())
  post_id    Int
  user_id    Int
  name       String
  email      String
  summary    String?
  review     String?
  price      Int?      // Rating for price
  value      Int?      // Rating for value
  quality    Int?      // Rating for quality
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Optional relations if you have Post and User models:
  // post       Post      @relation(fields: [post_id], references: [id])
  // user       User      @relation(fields: [user_id], references: [id])
}

// Complaint/Suggestion Model
model complaint {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  percentage     String?
  phone          String?
  last_education String?
  city           String?
  state          String?
  details        String?
  created_at     DateTime @default(now())
}
